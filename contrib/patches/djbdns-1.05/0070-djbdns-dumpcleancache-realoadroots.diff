diff -Nur djbdns-1.05.orig/cache.c djbdns-1.05/cache.c
--- djbdns-1.05.orig/cache.c	2013-01-20 18:30:10.770031691 +0100
+++ djbdns-1.05/cache.c	2013-01-20 18:33:26.238028220 +0100
@@ -5,6 +5,15 @@
 #include "tai.h"
 #include "cache.h"
 
+#include "buffer.h"
+#include "open.h"
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/mman.h>
+#include <unistd.h>
+#include "dns.h"
+
 uint64 cache_motion = 0;
 
 /* record cache stats */
@@ -229,3 +238,110 @@
 
   return 1;
 }
+
+
+static const char fn[]="dump/data";
+static const char fntmp[]="dump/data.tmp";
+
+char bspace[8096];
+buffer b;
+
+void cache_clean(int sig)
+{
+  unlink(fn);
+  _exit(0);
+}
+
+
+int cache_dump(int sig)
+{
+  uint32 pos;
+  unsigned int len;
+  int r;
+  int fd;
+
+  fd = open_trunc(fntmp);
+  if (fd == -1) return -1;
+
+  buffer_init(&b,buffer_unixwrite,fd,bspace,sizeof bspace);
+
+  pos = oldest;
+  while (pos < unused) {
+    len = get4(pos + 4) + get4(pos + 8) + 16;
+    if (byte_diff(x + pos + 20, 2, DNS_T_AXFR)){
+        if (byte_diff(x + pos + 20, 2, DNS_T_ANY)){
+            r = buffer_put(&b, x + pos + 4, len);
+            if (r == -1) {close(fd);return -1;}
+        }
+    }
+    pos += 4 + len;
+  }
+  pos = hsize;
+  while (pos < writer) {
+    len = get4(pos + 4) + get4(pos + 8) + 16;
+    if (byte_diff(x + pos + 20, 2, DNS_T_AXFR)){
+        if (byte_diff(x + pos + 20, 2, DNS_T_ANY)){
+            r = buffer_put(&b, x + pos + 4, len);
+            if (r == -1) {close(fd);return -1;}
+        }
+    }
+    pos += 4 + len;
+  }
+  if (buffer_flush(&b) == -1) {close(fd);return -1;}
+  if (fsync(fd) == -1) {close(fd);return -1;}
+  if (close(fd) == -1) return -1;
+  if (chmod(fntmp, 0600) == -1) return -1;
+  if (rename(fntmp,fn) == -1) return -1;
+  return 0;
+}
+
+int cache_load(void)
+{
+  char *p, *xx;
+  uint32 pos;
+  unsigned int len;
+  uint32 keylen;
+  uint32 datalen;
+  struct tai now;
+  struct tai expire;
+  int nb;
+  struct stat st;
+  int fd;
+  int flagns = 0;
+  char expirestr[TAI_PACK];
+
+  fd = open_read(fn);
+  if (fd == -1) return -1;
+  
+  if (fstat(fd,&st) == -1) {close(fd); return -1;}
+  xx = mmap(0,st.st_size,PROT_READ,MAP_SHARED,fd,0);
+  if (xx == MAP_FAILED) {close(fd); return -1;}
+  len = st.st_size;
+  p   = xx;
+
+  tai_now(&now);
+  pos = 0;
+  nb = 0;
+  while (pos + 16 <= len) {
+    uint32_unpack(p + pos, &keylen);
+    uint32_unpack(p + pos + 4, &datalen);
+    byte_copy(expirestr,TAI_PACK,p + pos + 8);
+    if (expirestr[0] & 0x80) flagns = 1;
+    expirestr[0] &= 0x7f;
+    tai_unpack(expirestr, &expire);
+    pos += 16;
+    if (pos + keylen + datalen > len) break; /* missing data */
+    if (!tai_less(&expire,&now)) {
+      tai_sub(&expire,&expire,&now);
+      cache_set(p + pos, keylen, p + pos + keylen, datalen, (unsigned int)expire.x, flagns);
+    } 
+    pos += keylen + datalen;
+    nb++;
+  }
+  munmap(xx, st.st_size);
+  close(fd);
+  return 0;
+}
+
+
+
diff -Nur djbdns-1.05.orig/cache.h djbdns-1.05/cache.h
--- djbdns-1.05.orig/cache.h	2013-01-20 18:30:10.770031691 +0100
+++ djbdns-1.05/cache.h	2013-01-20 18:34:55.790026628 +0100
@@ -15,4 +15,8 @@
 extern void cache_set(const char *,unsigned int,const char *,unsigned int,uint32,int);
 extern char *cache_get(const char *,unsigned int,unsigned int *,uint32 *,int *);
 
+extern int cache_dump(int);
+extern int cache_load(void);
+extern void cache_clean(int);
+
 #endif
diff -Nur djbdns-1.05.orig/dnscache.c djbdns-1.05/dnscache.c
--- djbdns-1.05.orig/dnscache.c	2013-01-20 18:30:10.758031691 +0100
+++ djbdns-1.05/dnscache.c	2013-01-20 18:41:17.038019851 +0100
@@ -390,15 +390,36 @@
 }
   
 #define FATAL "dnscache: fatal: "
+#define WARNING "dnscache: warning: "
 
 char seed[128];
 
+void exitasap(int sig){
+  if (cache_dump(sig) == -1)
+    strerr_warn2(WARNING,"unable to dump cache: ", &strerr_sys);
+  _exit(0);
+}
+
+void reload(int sig){
+  if (!roots_init())
+    strerr_die2sys(111,FATAL,"unable to read servers: ");
+}
+void dump(int sig){
+  if (cache_dump(sig) == -1)
+    strerr_warn2(WARNING,"unable to dump cache: ", &strerr_sys);
+}
+
+
 int main()
 {
   char *x;
   unsigned long cachesize;
 
   signal(SIGPIPE, SIG_IGN);
+  signal(SIGHUP,  reload);
+  signal(SIGALRM, dump);
+  signal(SIGINT, cache_clean);
+  signal(SIGTERM, exitasap);
   x = env_get("IP");
   if (!x)
     strerr_die2x(111,FATAL,"$IP not set");
@@ -460,6 +481,9 @@
   if (socket_listen(tcp53,20) == -1)
     strerr_die2sys(111,FATAL,"unable to listen on TCP socket: ");
 
+  if (cache_load() == -1)
+    strerr_warn2(WARNING,"unable to load data to cache: ", &strerr_sys);
+
   log_startup();
   doit();
 }
